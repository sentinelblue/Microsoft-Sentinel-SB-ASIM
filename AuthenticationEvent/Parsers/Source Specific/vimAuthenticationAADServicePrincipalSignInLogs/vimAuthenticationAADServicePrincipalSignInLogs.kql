let AADServiceSigninLogs = (
    starttime:datetime                  = datetime(null)
    , endtime:datetime                  = datetime(null)
    , username_has_any:dynamic          = dynamic([])
    , targetappname_has_any:dynamic     = dynamic([])
    , srcipaddr_has_any_prefix:dynamic  = dynamic([])
    , srchostname_has_any:dynamic       = dynamic([])
    , eventtype_in:dynamic              = dynamic([])
    , eventresultdetails_in:dynamic     = dynamic([])
    , eventresult:string                = "*"
    , user_type:dynamic                 = dynamic([])
    , user_id:dynamic                   = dynamic([])
    , dvc_id:dynamic                    = dynamic([])
    , dvc_os:dynamic                    = dynamic([])
    , dvc_type:dynamic                  = dynamic([])
    , ip:dynamic                        = dynamic([])
    , useragent:dynamic                 = dynamic([])
    , eventseverity:dynamic             = dynamic([])
    , eventproduct:dynamic              = dynamic([])
    , pivot_lookback:string             = "30"
    , disabled:bool                     = false
) {
    AADServicePrincipalSignInLogs
    | where 
        not(disabled)
        and (isnull(starttime)                             or TimeGenerated >= starttime)
        and (isnull(endtime)                               or TimeGenerated <= endtime)
        and ((array_length(username_has_any)         == 0) or ServicePrincipalName has_any(username_has_any))
        and ((array_length(targetappname_has_any)    == 0) or ResourceDisplayName has_any (targetappname_has_any))
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))
        and ((array_length(ip)                       == 0) or IPAddress has_any (ip))
        and ((array_length(user_id) == 0)                  or ServicePrincipalId has_any (user_id))
    | lookup AADResultTypes on ResultType
    | extend 
        TargetUserType = "Service"
        , EventProduct = "Entra ID"
    | where ((eventresult                       == "*") or EventResult has eventresult)
        and ((array_length(eventtype_in)          == 0) or EventType has_any (eventtype_in))
        and ((array_length(eventproduct)          == 0) or EventProduct has_any (eventproduct))
        and ((array_length(eventseverity)         == 0) or EventSeverity has_any(eventseverity))
        and ((array_length(eventresultdetails_in) == 0) or EventResultDetails has_any(eventresultdetails_in))
        and ((array_length(user_type)             == 0) or TargetUserType has_any(user_type))
        and (array_length(srchostname_has_any)    == 0)
        and (array_length(dvc_id)                 == 0)
        and (array_length(dvc_os)                 == 0)
        and (array_length(dvc_type)               == 0)
        and (array_length(useragent)              == 0) 
    | extend
        EventVendor             = "Microsoft"
        , EventCount            = toint(1)
        , EventSchema           = "Authentication"
        , EventSchemaVersion    = "0.1.3"
        , EventSubType          = "Service"
        , TargetAppType         = "Resource"
        , TargetUserIdType      = "EntraID"
        , TargetUsernameType    = "Simple"
        , LogonMethod           = "Service Principal"
        , EventStartTime        = TimeGenerated
        , EventEndTime          = TimeGenerated
        , EventMessage          = EventOriginalResultDetails
        , EventOriginalType     = ResultType
        , EventOriginalSubType  = Type
        , LocationDetails       = todynamic(LocationDetails)
        , DvcIpAddr             = IPAddress
        , SrcHostname           = IPAddress
    | project-rename
        ActingAppId                 = AppId
        , EventOriginalUid          = Id
        , EventProductVersion       = OperationVersion
        , EventUid                  = _ItemId
        , SrcIpAddr                 = IPAddress
        , TargetAppId               = ResourceIdentity
        , TargetAppName             = ResourceDisplayName
        , TargetSessionId           = CorrelationId
        , TargetUserId              = ServicePrincipalId
        , TargetUsername            = ServicePrincipalName
    | extend
        SrcGeoCity                  = tostring(LocationDetails.city)
        , SrcGeoCountry             = tostring(LocationDetails.countryOrRegion)
        , SrcGeoRegion              = tostring(LocationDetails.state)
        , SrcGeoLatitude            = toreal(LocationDetails.geoCoordinates.latitude)
        , SrcGeoLongitude           = toreal(LocationDetails.geoCoordinates.longitude)
        , Dst                       = TargetAppName
        , Dvc                       = strcat(EventVendor, '/', EventProduct)
        , IpAddr                    = SrcIpAddr
        , LogonTarget               = TargetAppName
        , Src                       = SrcIpAddr
        , User                      = TargetUsername
        , UserId                    = TargetUserId
        , UserType                  = TargetUserType
        , TargetSimpleUsername      = TargetUsername
        , TargetUserAadId           = TargetUserId
        , Application               = TargetAppName
        , AdditionalDetails         = bag_pack(
            "TenantId"                               , TenantId
            , "AuthenticationProcessingDetails"      , AuthenticationProcessingDetails
            , "ConditionalAccessPolicies"            , ConditionalAccessPolicies
            , "ConditionalAccessStatus"              , ConditionalAccessStatus
            , "ResourceServicePrincipalId"           , ResourceServicePrincipalId
            , "ServicePrincipalCredentialKeyId"      , ServicePrincipalCredentialKeyId
            , "UniqueTokenIdentifier"                , UniqueTokenIdentifier
            , "ServicePrincipalCredentialThumbprint" , ServicePrincipalCredentialThumbprint
        )
        , Pivots = bag_pack(
            "Ip", bag_pack(
                "Abuse IP Database", strcat('https://www.abuseipdb.com/check/'     , SrcIpAddr)
                , "Virus Total"    , strcat('https://virustotal.com/gui/search/'   , SrcIpAddr)
                , "Threat Book"    , strcat('https://www.threatbook.io/ip/'        , SrcIpAddr)
                , "Ip Location"    , strcat('https://www.iplocation.net/ip-lookup/', SrcIpAddr)
                , "Spur"           , strcat('https://spur.us/context/'             , SrcIpAddr)
                , "Azure Lookup"   , strcat('https://www.azurespeed.com/api/ipAddress?ipOrDomain=', SrcIpAddr)
            ),
            "User History", bag_pack(
                "All", strcat("vimAuthenticationAADServicePrincipalSignInLogs(starttime=ago(", pivot_lookback ,"d), user_id='", TargetUserId ,"')")
                , "IP", strcat("vimAuthenticationAADServicePrincipalSignInLogs(starttime=ago(", pivot_lookback ,"d), user_id='", TargetUserId ,"', ip='", SrcIpAddr, "')")
                , "Application", strcat("vimAuthenticationAADServicePrincipalSignInLogs(starttime=ago(", pivot_lookback ,"d), user_id='", TargetUserId ,"', targetappname_has_any='", TargetAppName ,"')")
            )
        )
    | project-away 
        Conditional*
        , Authentication*
        , Resource*
        , Location*
        , Service*
        , Result*
        , UniqueTokenIdentifier
        , DurationMs
        , SourceSystem
        , OperationName
        , Category
        , Level
        , Identity
        , FederatedCredentialId
        , TenantId
    | project-reorder
        TimeGenerated
        , User*
        , EventResult
        , EventSeverity
        , EventMessage
        , IpAddr
        , SrcGeoCountry
        , SrcGeoRegion
        , LogonMethod
        , LogonTarget
        , Pivots
        , Event*
        , Target*
        , Acting*
        , *
    | order by TimeGenerated
};
AADServiceSigninLogs(starttime, endtime, username_has_any, targetappname_has_any, srcipaddr_has_any_prefix, srchostname_has_any, eventtype_in, eventresultdetails_in, eventresult, user_type, user_id, dvc_id, dvc_os, dvc_type, ip, useragent, eventseverity, eventproduct, pivot_lookback, disabled)
